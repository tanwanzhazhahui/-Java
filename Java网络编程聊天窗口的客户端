package lab14;

import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.Label;
import java.awt.Panel;
import java.awt.TextArea;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;

public class TcpClientUI extends Frame {
	Frame f = new Frame("Client");
	TextField t1;
	TextArea ma;
	TextArea sa;
	Button b1;
	Button b2;
	Button q;
	Label l;
	Panel p1 = new Panel();
	Panel p2 = new Panel();
	Panel p3 = new Panel();
	Panel p4 = new Panel();
	Client client;
	public void setClient(Client client) {
		this.client=client;
	}

	public TcpClientUI() {
		f.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				f.dispose();
			}
		});
		f.setVisible(true);
		f.setSize(500, 400);
		t1 = new TextField(20);
		sa = new TextArea(3, 50);
		ma = new TextArea();
		ma.setEditable(false);
		t1.setText("127.0.0.1");
		b1 = new Button("发送");
		b2 = new Button("连接");
		q= new Button("清屏");
		q.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO 自动生成的方法存根
				ma.setText("");
			}
		});
		l = new Label("服务器：");
		p1.add(l);
		p1.add(t1);
		p1.add(b2);
		// add event
		b2.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				// TODO 自动生成的方法存根
				client=new Client(t1.getText(),2222,TcpClientUI.this);
				ma.append("成功连上服务器"+"\n");
				TcpClientUI.this.setClient(client);
			}
		});
		f.add(p1, BorderLayout.NORTH);
		f.add(ma, BorderLayout.CENTER);
		p3.add(sa, BorderLayout.CENTER);
		p4.add(b1, new GridLayout());
		p4.add(q,new GridLayout());
		// add event
		b1.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO 自动生成的方法存根
				client.sendMsg(sa.getText());
				ma.append("客户端:" + sa.getText() + "\n");
				sa.setText("");
			}
		});
		p2.add(p3, BorderLayout.CENTER);
		p2.add(p4, BorderLayout.EAST);
		f.add(p2, BorderLayout.SOUTH);
		f.pack();
		f.setResizable(false);
	}

	public static void main(String[] args) {
		// TODO 自动生成的方法存根
		TcpClientUI tcu = new TcpClientUI();
	}
}

class Client extends Thread{
	BufferedReader in;
	PrintStream out;
	String msg = null;
	TcpClientUI tcu;
	public Client(String ip, int port,TcpClientUI tcu) {
		this.tcu=tcu;
		try {
			Socket s = new Socket("127.0.0.1", 2222);
			System.out.println("已顺利连接服务器");
			out = new PrintStream(s.getOutputStream());
			in = new BufferedReader(new InputStreamReader(s.getInputStream()));
		} catch (UnknownHostException e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		} catch (IOException e) {
			// TODO 自动生成的 catch 块
			e.printStackTrace();
		}
		start();
	}
	public void run() {
		while (true) {
			try {
				msg = in.readLine();
			} catch (SocketException e) {
				// TODO 自动生成的 catch 块
				System.out.println(e);
				break;
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println(e);
			}
			if (msg != null) {
				tcu.ma.append(msg + "\n");
			}
		}
	}


	public void sendMsg(String msg) {
		try {
			out.println("客户端:" + msg);
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}

